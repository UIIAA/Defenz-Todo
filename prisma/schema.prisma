// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String                    @id @default(cuid())
  email                    String                    @unique
  name                     String?
  password                 String
  role                     String                    @default("user")
  emailVerified            DateTime?
  image                    String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  activities               Activity[]
  auditLogs                AuditLog[]
  accounts                 Account[]
  sessions                 Session[]
  notificationPreferences  NotificationPreferences?
  emailLogs                EmailLog[]
  activityComments         ActivityComment[]

  @@index([email])
}

model Activity {
  id          String            @id @default(cuid())
  priority    Int               // 0=Alta, 1=Média, 2=Baixa
  area        String            // Marketing, Vendas, Gestão, Estratégico, Back office
  title       String            // O Quê? (What) - Título da ação
  description String?           @db.Text // Por Quê? (Why) - Justificativa detalhada
  responsible String?           // Quem? (Who) - Responsável pela execução
  deadline    String?           // Quando? (When) - Prazo/Timeline
  location    String?           // Onde? (Where) - Local/Plataforma de execução
  how         String?           @db.Text // Como? (How) - Método/Processo detalhado
  cost        String?           // Quanto? (How Much) - Investimento/Custo
  status      String            @default("pending") // pending, in_progress, completed, ok
  deletedAt   DateTime?         // Soft delete
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  auditLogs   AuditLog[]
  comments    ActivityComment[]

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([area])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String   // CREATE, UPDATE, DELETE, etc.
  entityType String   // Activity, User, etc.
  entityId   String
  userId     String
  userEmail  String
  changes    String?  // JSON string of changes
  createdAt  DateTime @default(now())

  activity   Activity? @relation(fields: [entityId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model NotificationPreferences {
  id                   String   @id @default(cuid())
  userId               String   @unique
  activityAssigned     Boolean  @default(true)
  deadlineApproaching  Boolean  @default(true)
  statusChanged        Boolean  @default(true)
  activityDeleted      Boolean  @default(true)
  dailyDigest          Boolean  @default(false)
  weeklyReport         Boolean  @default(false)
  quietHoursStart      String?  // e.g., "22:00"
  quietHoursEnd        String?  // e.g., "08:00"
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailLog {
  id         String   @id @default(cuid())
  userId     String
  emailType  String   // assigned, deadline, status_change, deleted, digest, report
  activityId String?
  sentTo     String
  subject    String
  sentAt     DateTime @default(now())
  status     String   // sent, failed, bounced
  error      String?
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([emailType])
  @@index([sentAt])
  @@index([status])
}

model ActivityComment {
  id         String   @id @default(cuid())
  activityId String
  userId     String
  userName   String   // Denormalizado para performance
  userEmail  String
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([activityId, createdAt])
  @@index([userId])
}